<div class="row portfolio-container">
  <div class="col-sm-4 left-arrow-container">
  <%= link_to image_tag('left_arrow.png', class: 'arrow-img'), root_path, class: 'arrow' %>
  </div>
  <div class="col-sm-4 page-header-container">
    <h1><span id="page-header">portfolio</span></h1>
  </div>
  <div class="col-sm-4 right-arrow-container">
    <%= link_to image_tag('right_arrow.png', class: 'arrow-img'), about_path, class: 'arrow' %>
  </div>

  <div class="col-sm-6 piece-container" id="zeto">
    <button class="btn piece-btn" data-toggle="modal" data-target="#zetoModal">
      <h2 class="piece-header">zeto</h2>
    </button>
  </div>

  <div class="col-sm-6 piece-container" id="sixtwelve">
    <button class="btn piece-btn" data-toggle="modal" data-target="#sixTwelveModal">
      <h2 class="piece-header">sixtwelve</h2>
    </button>
  </div>

  <div class="col-sm-6 piece-container" id="minesweeper">
    <button class="btn piece-btn" data-toggle="modal" data-target="#minesweeperModal">
      <h3 class="piece-header">minesweeper</h3>
    </button>
  </div>

  <div class="col-sm-6 piece-container" id="blackjack">
    <button class="btn piece-btn" data-toggle="modal" data-target="#blackJackModal">
      <h2 class="piece-header">blackjack</h2>
    </button>
  </div>

  <!-- Modals -->

  <div class="modal fade" id="zetoModal" tabindex="-1" role="dialog" aria-labelledby="zetoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title" id="zetoModalLabel">zeto</h4>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <h1>Summary</h1>
              <p>
                My most recent project is called zeto. The problem I wanted to address with zeto was that Launch Academy, a 10 week immersive bootcamp, had no cohesive network for all students to connect with one another. So I created zeto, a medium for past, present and future students of Launch Academy to connect and more importantly stay connected. Zeto was built with Rails, Ruby, HTML, CSS, SASS, JavaScript, jQuery, Ajax along with Facebook omniauth, Mapbox and JSON. The github repository link is: <a href="github.com/lchangdev/zeto-la"><span class="paragraph-link">zeto github repository</span></a>. The live web application can be found here: <a href="http://zeto-la.herokuapp.com"><span class="paragraph-link">zeto</span></a>.
              </p>
              <p>
                Users are able to see a list of all past, present and future launchers as well as hiriing partners and launch staff. Features on zeto include a search bar which allows users to search for launchers and posts via city or state. Also, users are able to sort by name or cohort.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 zeto-gallery1">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Rather than going with a simple show page, I wanted to implement bootstraps modals to be each users show page. This was technically challenging since I could not use rails magic to create a show page for each user. I solved this problem by iterating through each user and creating a unique modal id with the user id. Then to ensure that each marker had the correct modal, I included the modal id within the javascript loop that created each popup.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 zeto-gallery2">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Zeto is also a platform for users to share events that are happening within their respective cities as well as post any job leads that they may come across. Posts are easily identifiable on the map by different color markers. Users are also able to view all posts, posts they are authors of and events they are attending.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 zeto-gallery3">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Users can come to this page to see all of the details regarding event pots or job leads. Only authors of the post will be able to edit or delete the respective post.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 zeto-gallery4">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="sixTwelveModal" tabindex="-1" role="dialog" aria-labelledby="sixTwelveModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title" id="sixTwelveModalLabel">sixtwelve</h4>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <h1>Summary</h1>
              <p>
                I sought to create my first web application just after a week of learning Ruby on Rails. I was initially approached with a problem that a church in Southern California was having regarding the ability to share prayers amongst groups within a single church. sixtwelve was created to address this issue for them. The goal for sixtwelve was to create a medium for groups to share their prayers exclusively with their group members. When planning the user stories and database for this web app, I took into consideration scalability for this web application.
              </p>
              <p>
                Members are given access to a group after an admin or moderator approves of their request to join. Once admitted to a group, members can see other members, share prayer requests and comment on those requests.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 sixtwelve-gallery1">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                sixtwelve uses Facebook omniauth for user authentication. For email, I used mandrill for production. Users are able to see all groups that are present however will only see the enter link after their request to join the respective group has been verified.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 sixtwelve-gallery2">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Users are able to comment on prayer requests. Authors of comments are able to delete their comment only. Likewise the author of the prayer is able to edit or delete their prayer request.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 sixtwelve-gallery3">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                ER Diagram for sixtwelve.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 sixtwelve-gallery4">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

<div class="modal fade" id="minesweeperModal" tabindex="-1" role="dialog" aria-labelledby="minesweeperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title" id="minesweeperModalLabel">minesweeper</h4>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <h1>Summary</h1>
              <p>
                Recreated minesweeper using Gosu library to handle the graphics and input code. Provided with the setup code and a bare-bones implementation of the Minefield class, I was tasked to create a functional game. Minesweeper was built with Gosu and Ruby.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 minesweeper-gallery1">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Provided with just the bare bones of the minesweeper game, the first step I took was to create the map with a complex data structure: an array of arrays of hashes. The rows, columns and mine count are defined when the Minefield object is instantiated. Each block is a hash with keys and values of status defaulted to false, which checks to see if a block has been cleared, and mine set to 3 different values: 0, 1, 2 where 0 is no mine, 1 is a mine, 2 denoted.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 minesweeper-gallery2">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Created a validation any_mines_denoted? method to see if any mines were denoted. This method is used to verify if the player has lost the game. The adjacent_mines method displays the amount of mines with integers displayed to the player to assist with the game. The cell_cleared? method will continue to clear a block until it reaches a mine. If a mine is clicked then the mine value will be changed to 2, in which case the game is over.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 minesweeper-gallery3">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Created validation all_cells_cleared? method to find when all cells have been cleared and once cleared prompt the player that they have won. Another validation method contains_mine? checks to see if the block exists and if it does checks to see if the value is 1 or 2 representing a mine and a denoted mine.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 minesweeper-gallery4">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="blackJackModal" tabindex="-1" role="dialog" aria-labelledby="blackJackModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title" id="blackJackModalLabel">Black Jack</h4>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <h1>Summary</h1>
              <p>
                Implementing Object Oriented Programming, I was tasked to create a black jack game that could be played through the terminal. Several user stories that were required included allowing players to hit and stand as well as having dealer hit until score is atleast 17. This game was built with Ruby.
              </p>
              <p>
                Card class. Within the Card class, I created the cards with 4 methods which include being able to call the rank and suit of a card, validate for face cards and give cards values except for the ace.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery1">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Deck class. Within the Deck class, the Deck is created with an iteration through the rank array and suits array within the Card class then shuffled. Also when a Card is drawn it is deleted from the Deck instance to ensure there are no duplications of a Card.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery2">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Hand class. Within the Hand class, I created several methods which includes a method to count the number of aces within a given hand, sum of the score of a given hand without aces and the score of a given hand relative to the sum of the rest of the hand. The last method was created to set the value of aces, 1 or 11, dependent on the score of the hand.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery3">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Initializing black jack game. A new Deck and Hand instance is created. 2 cards for the dealer is dealt with one shown.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery4">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Player conditionals. User is prompted to hit or stay. Conditional is set dependent on user input.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery5">
            </div>
            <div class="col-xs-8 col-xs-offset-2 piece-summary-container">
              <p>
                Dealer conditionals. New  Hand instance is created for the dealer with the prior 3 cards drawn in the beginning of the game. While the dealer's score is less than 17, dealer must continue to hit. The two hands are then compared and there are 3 outcomes: player wins, dealer wins or they push.
              </p>
            </div>
            <div class="col-xs-10 col-xs-offset-1 blackjack-gallery6">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
</div>
